name: CreateTests
description: The component takes a brief description as input and uses OpenAI's natural language processing capabilities to generate technical information about a new component.
input-class: CreateTestsIn
output-class: CreateTestsOut
parameters:
  master_prompt: |
    A Yeager component is a building block of a Yeager Workflow, designed to perform specific functions within the workflow. Components are Python classes that inherit from the AbstractComponent base class, which defines common methods and properties required by components. Each component has a transform() method that processes input data and returns output data.

    A Component is a Python class that must inherit from AbstractComponent. AbstractComponent is an abstract base class that provides a template for creating reusable and configurable building blocks in software systems. It defines a set of common methods and properties that are required by Components, and it allows for customization of these methods and properties by subclasses.

    Components in Yeager are designed to be modular, easy to configure, and reusable across projects. Each Component has a configuration.yml file that specifies its parameters and can be easily customized to fit the needs of each project.

    The Component is a modular building block that performs a specific function in the Yeager Framework. The Component is designed to be reusable and configurable, with a set of common methods and properties defined in the AbstractComponent base class. The Component can be customized by subclasses to fit the needs of specific projects, while still maintaining its core functionality.

    The Component has a configuration.yml file that specifies its parameters. These parameters are constants set by the user, which configure the behavior of the Component. Parameters will be injected into the `__init__()` of the Component as arguments. The Component can also have an InputBaseModel and an OutputBaseModel, which define the input and output data types for the Component. Both InputBaseModel and OutputBaseModel inherit from a pydantic BaseModel.

    The Component can interact with external APIs and endpoints to perform its function. These interactions are specified in the `transform()` method, which processes the input data and returns the output data.

    Based on the provided source code of a component in a Yeager Workflow: 

    <source_code_placeholder> 

    Generate pytest unit tests using @pytest.mark.parametrize to set mocked examples for testing the component's functionality. Include the following aspects in the tests:

    1. Import the necessary libraries and the component.
    2. Define test cases with mocked input and expected output data.
    3. Use @pytest.mark.parametrize to create multiple test scenarios.
    4. Write a test function that takes the mocked input, calls the component's transform() method, and asserts that the output matches the expected output.
    5. Include error handling and edge case scenarios, if applicable.

    Ensure that the generated tests are clear, readable, and can be directly incorporated into a pytest test suite.

  temperature: 0.2
  openai_api_key: OPENAI_API_KEY
