import uuid
import typing

from discord.ext import commands

from experts.yWorkflows.workflow_creator.workflow_creator import (
    WorkflowCreator,
    WorkflowCreatorIn,
)
from core.discord_utils.embeds import WorkflowEmbed
from core.discord_utils.views import TweetButton
from core.discord_utils import callbacks as bot_callbacks
from core.github_utils.github_app import YeagerGithubApp


async def create_workflow(
    bot: commands.Bot, ctx: typing.Any, *, user_prompt: str
) -> typing.Any:
    creator = WorkflowCreator()
    workflow_in = WorkflowCreatorIn(prompt=user_prompt)
    workflow_ID = str(uuid.uuid4())[:8]

    tweet_text = "Check out this awesome workflow I created using Yeager! üöÄüë®‚Äçüíª You can see the results on this GitHub link: https://github.com/yeagerai . Don't forget to join our community server to see what others are building: https://discord.gg/VpfmXEMN66 . @yeagerai #yeager #ai #community"

    user = ctx.user
    mention_string = user.mention

    thread = await ctx.channel.create_thread(
        name=f"Workflow: {workflow_ID} generated by {ctx.user}"
    )

    orig_message = await ctx.channel.send(
        mention_string,
        embed=WorkflowEmbed(
            title=f"I'm creating a new workflow for {ctx.user} ...",
            description="",
            initial_prompt=user_prompt,
            thread_ID=workflow_ID,
            thread_url=f"https://discord.com/channels/{ctx.guild.id}/{thread.id}",
            github_url="https://github.com/yeagerai",
        ),
        view=TweetButton(tweet_text=tweet_text),
    )

    await thread.add_user(ctx.user)

    await thread.send(f"""Hi {mention_string}, this is the thread for your new workflow!\n\n
By continuing to interact with the yWorkflows bot, you acknowledge and agree to our Terms and Conditions https://yeager.ai/terms-and-conditions .\n 
Please ensure that you have read and understood these terms before proceeding with the use of our bot.\n 
Your continued interaction with the bot constitutes your acceptance of these terms.""")

    yeager_github_app = YeagerGithubApp(repo_id=workflow_ID, discord_user_name=ctx.user)
    await yeager_github_app.build_app()

    callbacks = bot_callbacks.wrap_callbacks(bot, ctx, thread)
    callbacks["yeager_github_app"] = yeager_github_app
    callbacks["orig_message"] = orig_message
    result = await creator.transform(workflow_in, callbacks=callbacks)
    print(result)
    return
