name: CreateSource
description: The component takes a brief description as input and uses OpenAI's natural language processing capabilities to generate technical information about a new component.
input-class: CreateSourceIn
output-class: CreateSourceOut
parameters:
    master_prompt_1: |
        A Yeager Component is a modular, reusable, and configurable building block in the Yeager Workflow system, designed to perform a specific task or operation within a workflow. 
        Each component serves as a unit of functionality that can be easily connected, combined, and configured with other components to create powerful and customized workflows. 
        Here are some key aspects of a Yeager Component:

        - Modularity: Yeager Components are designed to be modular, which means they can be easily integrated into a workflow, replaced, or upgraded without affecting the overall structure or functionality of the workflow. This modular design promotes flexibility, maintainability, and scalability in the Yeager Workflow system.

        - Inheritance from AbstractComponent: Each Yeager Component inherits from an AbstractComponent base class, which defines a set of common methods and properties that are required by all components. This ensures a consistent interface and behavior across different components, making it easier for users to combine and configure them in a workflow.

        - Configuration: Yeager Components come with a configuration.yml file that specifies their parameters, input-class, output-class, and other necessary configurations. This allows users to easily customize the behavior of the components by modifying the configuration file as needed.

        - Input and Output Data Types: Each Yeager Component has an InputBaseModel and an OutputBaseModel, which define the input and output data types for the component. These models inherit from the Pydantic BaseModel, ensuring that the input and output data is properly validated and formatted.

        - Transform Method: The core functionality of a Yeager Component is defined in its transform() method. This method processes the input data, performs the component's specific task, and returns the output data. The transform() method can also interact with external APIs, endpoints, or other resources to complete its task.

        - Interoperability: Yeager Components are designed to work seamlessly with other components in a workflow, allowing users to easily create complex, multi-step processes by connecting components together in a directed acyclic graph (DAG).

        - Testability: Yeager Components can be individually tested and verified, ensuring the reliability and correctness of the component's functionality. This makes it easier to maintain and debug workflows, as issues can be isolated and resolved at the component level.

        - Configuration File Loading: Each Yeager Component must load its parameters from a configuration.yml file located in the same path as the component's source code. This configuration file contains the necessary information, such as API keys or specific settings, for the component to function correctly. By loading the parameters from this file, the component ensures that it is properly configured and can be easily customized by users.

        - FastAPI "/transform/" Endpoint: A Yeager Component is required to define a FastAPI "/transform/" endpoint that executes the component's transform() method. This endpoint allows the component to be easily integrated into a Yeager Workflow and communicate with other components. By exposing a standard "/transform/" endpoint, the component can be easily connected with other components, ensuring a consistent interface for data exchange within the workflow.

        - Loading Environment Variables: Each Yeager Component should use load_dotenv() to load environment variables from a .env file located in the same path as the source code. This practice ensures that any sensitive information or secrets, such as API keys or access tokens, are securely stored and accessed only when necessary. By loading environment variables in this manner, the component can protect sensitive data while still allowing users to easily configure the component as needed.

        In summary, a Yeager Component is a modular, reusable, and configurable building block in the Yeager Workflow system that performs a specific task within a workflow. It inherits from an AbstractComponent base class, has a defined input and output data model, and is designed to work seamlessly with other components to create powerful and customized workflows.

    master_prompt_2: |
        This is an example of the source code of a Yeager Component:

        ```
        import os
        from typing import Optional

        import yaml
        from dotenv import load_dotenv
        from fastapi import FastAPI
        from pydantic import BaseModel
        import openai

        from core.abstract_component import AbstractComponent


        class GenerateTechnicalInfoInputDict(BaseModel):
            prompt: str


        class GenerateTechnicalInfoOutputDict(BaseModel):
            component_name: str
            total_tokens_used: int
            component_full_response: str
            component_internal_status: int


        class GenerateTechnicalInfo(AbstractComponent):
            def __init__(self) -> None:
                super().__init__()
                with open(self.component_configuration_path(), "r", encoding="utf-8") as file:
                    yaml_data = yaml.safe_load(file)
                self.openai_api_key: Optional[str] = os.environ.get(
                    yaml_data["parameters"]["openai_api_key"]
                )
                self.master_prompt: str = yaml_data["parameters"]["master_prompt"]
                self.output = ""

            def transform(
                self, args: GenerateTechnicalInfoInputDict
            ) -> GenerateTechnicalInfoOutputDict:
                openai.api_key = self.openai_api_key
                print(f"Executing the transform of the {type(self).__name__} component...")

                o_model = "gpt-4"
                o_model_pricing_every_1000 = 0.03

                completion = openai.ChatCompletion.create(
                    model=o_model,
                    messages=[
                        {"role": "system", "content": self.master_prompt},
                        {"role": "user", "content": args.prompt},
                    ],
                )

                print(
                    f"Total spent by {type(self).__name__} using the {o_model}: {completion.usage.total_tokens} tokens for {completion.usage.total_tokens*o_model_pricing_every_1000/1000} $"
                )

                try:
                    response = (
                        completion.choices[0].message.content.split("```")[1].split("```")[0]
                    )
                except IndexError:
                    out = GenerateTechnicalInfoOutputDict(
                        component_name="Error",
                        component_full_response=completion,
                        total_tokens_used=completion.usage.total_tokens,
                        component_internal_status=500,
                    )
                    return out

                resp_yml = yaml.safe_load(response)
                out = GenerateTechnicalInfoOutputDict(
                    component_name=resp_yml["name"],
                    component_full_response=response,
                    total_tokens_used=completion.usage.total_tokens,
                    component_internal_status=200,
                )
                return out


        load_dotenv()
        gen_tech_info_app = FastAPI()


        @gen_tech_info_app.post("/transform/")
        async def transform(
            args: GenerateTechnicalInfoInputDict,
        ) -> GenerateTechnicalInfoOutputDict:
            gen_tech_info = GenerateTechnicalInfo()
            return gen_tech_info.transform(args)

        ```
        You are an expert system specifically designed to create the source code of Yeager components. 
        The user will send you the Component name and a yaml with all the information required to create the component, and you will return only a block of python code with the source code of the Yeager component.

    master_prompt_wf1: |
        A workflow is a series of interconnected steps or tasks that are executed in a specific order to achieve a specific goal. In the context of software development, a workflow is a structured process for automating tasks and solving problems. A workflow can be composed of several components or steps, each performing a specific function and producing a specific output. Workflows are used to automate repetitive or complex tasks, such as data processing, image recognition, or natural language processing.

        In Yeager, a workflow is implemented as a Directed Acyclic Graph (DAG), which is a directed graph with no directed cycles. In a DAG, each node represents a component or step in the workflow, and each edge represents the flow of data between the components. The DAG structure ensures that each component is executed only once and in the correct order.

        A Yeager workflow source code file typically consists of the following components:

        - Import statements: These import the required modules, classes, and functions. This includes importing the AbstractWorkflow base class, as well as any other modules or libraries needed for the workflow.

        - Input and Output Models: These define the input and output data types for the workflow. Both InputBaseModel and OutputBaseModel inherit from Pydantic's BaseModel, ensuring data validation and serialization.

        - Workflow class definition: This defines the workflow class that inherits from the AbstractWorkflow base class. The class should define the init() method and the transform() method.

        - Init() method: This method initializes the components that make up the workflow and sets up any necessary callbacks. It may also define any other configuration or setup steps required for the workflow.

        - Transform() method: This method calls the super().transform() method and passes in the appropriate arguments and callbacks. It then extracts the relevant outputs from the results_dict and uses them to create the final output for the workflow.

        - Helper methods: These are additional methods or functions that may be needed for the workflow. They can be used to perform data manipulation, post-processing, or other tasks as needed.

        - Main function or entry point: This may be included if the workflow is intended to be run as a standalone script or application. The main function would typically initialize the workflow and call the transform() method to execute the workflow.

        - FastAPI "/transform/" Endpoint: A Yeager Component is required to define a FastAPI "/transform/" endpoint that executes the component's transform() method. This endpoint allows the component to be easily integrated into a Yeager Workflow and communicate with other components. By exposing a standard "/transform/" endpoint, the component can be easily connected with other components, ensuring a consistent interface for data exchange within the workflow.

        - Loading Environment Variables: Each Yeager Component should use load_dotenv() to load environment variables from a .env file located in the same path as the source code. This practice ensures that any sensitive information or secrets, such as API keys or access tokens, are securely stored and accessed only when necessary. By loading environment variables in this manner, the component can protect sensitive data while still allowing users to easily configure the component as needed.

        Overall, the source code file for a class that subclasses AbstractWorkflow should define the input and output models, define the workflow class, initialize the components and callbacks, implement the transform() method to execute the workflow and create the final output, and include any helper methods or functions as needed.    

        When you subclass AbstractWorkflow, you can call the super().transform(args=args) method to automatically execute all the components in the desired order. This method takes the input data as an argument and returns a dictionary of outputs, where each key corresponds to a specific component output.

        To create the output for the workflow, you can focus on defining the input and output base models for the workflow and connecting the results_dict to produce the desired output format. The input base model should define the input data for the workflow, while the output base model should define the output data format for the workflow.

        Once you have the results_dict, you can extract the relevant outputs for your workflow by accessing the corresponding keys in the dictionary. You can then use this data to create the output in the desired format, which could be a Pydantic BaseModel or any other data structure that meets your needs.

        It's important to note that you may need to do some post-processing or data manipulation to create the final output, depending on the requirements of your workflow. This may involve merging, filtering, or transforming the data to produce the desired output format. However, the core functionality of executing the components and producing the intermediate results is handled automatically by calling the super().transform(args=args) method.

    master_prompt_wf2: |
        This is an example of the source code of a Yeager Workflow:

        ```
        import typing
        from typing import Optional
        from dotenv import load_dotenv
        from fastapi import FastAPI
        from pydantic import BaseModel

        from core.workflows.abstract_workflow import AbstractWorkflow


        class ComponentCreatorIn(BaseModel):
            prompt: str
            workflow_path: Optional[str] = None
            workflow_name: Optional[str] = None


        class ComponentCreatorOut(BaseModel):
            new_component_name: str
            new_component_path: str
            new_component_creation_status: int


        class ComponentCreator(AbstractWorkflow):
            def __init__(self) -> None:
                super().__init__()

            async def transform(
                self, args: ComponentCreatorIn, callbacks: typing.Any
            ) -> ComponentCreatorOut:
                results_dict = await super().transform(args=args, callbacks=callbacks)
                new_component_name = results_dict[0].component_name
                new_component_path = results_dict[1].component_path
                last_key = list(results_dict.keys())[-1]
                new_component_creation_status = results_dict[last_key].component_internal_status
                out = ComponentCreatorOut(
                    new_component_name=new_component_name,
                    new_component_path=new_component_path,
                    new_component_creation_status=new_component_creation_status,
                )
                return out

        load_dotenv()
        component_creator_app = FastAPI()


        @component_creator_app.post("/transform/")
        async def transform(
            args: ComponentCreatorIn,
        ) -> ComponentCreatorOut:
            component_creator = ComponentCreator()
            return await component_creator.transform(args, callbacks=None)

        ```
        You are an expert system specifically designed to create the source code of Yeager workflows. 
        The user will send you the Workflow name and a yaml with all the information required to create the workflow, and you will return only a block of python code with the source code of the Yeager workflow.

    temperature: 0.2
    openai_api_key: OPENAI_API_KEY
